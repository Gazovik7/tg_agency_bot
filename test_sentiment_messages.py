
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è 3 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
"""
import asyncio
import logging
from sentiment_analyzer import SentimentAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_client_messages():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    analyzer = SentimentAnalyzer()
    
    # 3 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
    test_messages = [
        "–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ —Ä–∞–±–æ—Ç–∞?",
        "–≠—Ç–æ —É–∂–∞—Å! –ü–µ—Ä–µ–¥–µ–ª—ã–≤–∞–π—Ç–µ!"
    ]
    
    logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
    logger.info("=" * 60)
    
    for i, message in enumerate(test_messages, 1):
        logger.info(f"\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ {i}: '{message}'")
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            result = await analyzer.analyze_sentiment(message)
            
            if result:
                score = result['score']
                label = result['label']
                confidence = result['confidence']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                emoji = "üòä" if label == "positive" else "üò†" if label == "negative" else "üòê"
                
                logger.info(f"   {emoji} –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {label.upper()}")
                logger.info(f"   üìä –û—Ü–µ–Ω–∫–∞: {score:.3f} (-1 –¥–æ 1)")
                logger.info(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f} (0 –¥–æ 1)")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
                if label == "positive":
                    interpretation = "–ö–ª–∏–µ–Ω—Ç –¥–æ–≤–æ–ª–µ–Ω"
                elif label == "negative":
                    interpretation = "–ö–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ–≤–æ–ª–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è!"
                else:
                    interpretation = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
                
                logger.info(f"   üí° –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {interpretation}")
                
            else:
                logger.error("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        
        logger.info("-" * 40)
    
    logger.info("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(test_client_messages())
