
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∞–Ω–∞–ª–∏–∑–∞ –∏—Ö —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import logging
import os
from datetime import datetime

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from models import Message, Chat
from sentiment_analyzer import SentimentAnalyzer

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class SentimentTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self):
        self.sentiment_analyzer = SentimentAnalyzer()
        self.setup_database()
    
    def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        database_url = os.getenv("DATABASE_URL")
        if not database_url:
            raise ValueError("DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.engine = create_engine(database_url)
        Session = sessionmaker(bind=self.engine)
        self.session = Session()
    
    def add_test_messages(self):
        """–î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —á–∞—Ç
        chat = self.session.query(Chat).first()
        if not chat:
            logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return []
        
        test_messages = [
            "–°–ø–∞—Å–∏–±–æ! –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ —Ä–∞–±–æ—Ç–∞?",
            "–≠—Ç–æ —É–∂–∞—Å! –ü–µ—Ä–µ–¥–µ–ª—ã–≤–∞–π—Ç–µ!"
        ]
        
        added_messages = []
        
        for i, text in enumerate(test_messages, 1):
            message = Message(
                message_id=999000 + i,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                chat_id=chat.id,
                user_id=999999,  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                username="test_client",
                full_name="–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç",
                text=text,
                message_type='text',
                is_team_member=False,  # –ö–ª–∏–µ–Ω—Ç—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                timestamp=datetime.utcnow(),
                processed_for_sentiment=False
            )
            
            self.session.add(message)
            added_messages.append(message)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {i}: '{text}'")
        
        self.session.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(added_messages)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        return added_messages
    
    async def analyze_test_messages(self, messages):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        for message in messages:
            logger.info(f"\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: '{message.text}'")
            
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
                sentiment_result = await self.sentiment_analyzer.analyze_sentiment(message.text)
                
                if sentiment_result:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ
                    message.sentiment_score = sentiment_result['score']
                    message.sentiment_label = sentiment_result['label']
                    message.sentiment_confidence = sentiment_result['confidence']
                    message.processed_for_sentiment = True
                    
                    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    score = sentiment_result['score']
                    label = sentiment_result['label']
                    confidence = sentiment_result['confidence']
                    
                    logger.info(f"‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
                    logger.info(f"  - –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {label.upper()}")
                    logger.info(f"  - –û—Ü–µ–Ω–∫–∞: {score:.3f} (–æ—Ç -1 –¥–æ 1)")
                    logger.info(f"  - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f} (–æ—Ç 0 –¥–æ 1)")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                    if label == 'positive':
                        emoji = "üòä"
                    elif label == 'negative':
                        emoji = "üò†"
                    else:
                        emoji = "üòê"
                    
                    print(f"  {emoji} '{message.text}' -> {label.upper()} ({score:.2f})")
                    
                else:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å: '{message.text}'")
                    message.processed_for_sentiment = True
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ '{message.text}': {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        self.session.commit()
        logger.info("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    async def run_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
            if not self.sentiment_analyzer.api_key:
                logger.error("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                logger.info("–î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á —á–µ—Ä–µ–∑ Secrets tool –≤ Replit")
                return
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            test_messages = self.add_test_messages()
            
            if not test_messages:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            await self.analyze_test_messages(test_messages)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.show_results_summary(test_messages)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        finally:
            self.session.close()
    
    def show_results_summary(self, messages):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        logger.info("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:")
        logger.info("=" * 50)
        
        for i, message in enumerate(messages, 1):
            text = message.text
            label = message.sentiment_label or "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            score = message.sentiment_score or 0
            confidence = message.sentiment_confidence or 0
            
            if label == 'positive':
                emoji = "üòä"
            elif label == 'negative':
                emoji = "üò†"
            else:
                emoji = "üòê"
            
            logger.info(f"{i}. {emoji} '{text}'")
            logger.info(f"   ‚Üí {label.upper()} | –û—Ü–µ–Ω–∫–∞: {score:.2f} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
            logger.info("")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SentimentTester()
    await tester.run_test()


if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("=" * 40)
    asyncio.run(main())
